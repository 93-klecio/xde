{"version":3,"sources":["scripts/buildPackage.js"],"names":[],"mappings":";;;;IAsBe,iBAAiB,qBAAhC,WAAiC,IAAI,EAAE;;AAErC,MAAI,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;AACxF,MAAI,eAAe,GAAG,QAAQ,CAAC;AAC/B,SAAO,MAAM,UAAU,CAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,mBAAmB,EAAE,YAAY,EAAE,kBAAkB,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;CAClK;;IAEc,QAAQ,qBAAvB,aAA0B;AACxB,QAAM,iBAAiB,EAAE,CAAC;AAC1B,QAAM,CAAC,KAAK,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;AAC5C,eAAa,EAAE,CAAC;AAChB,QAAM,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC;AAClC,QAAM,CAAC,KAAK,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAC/C,SAAO,IAAI,CAAC;CACb;;IAEc,aAAa,qBAA5B,WAA6B,OAAO,EAAE;AACpC,QAAM,UAAU,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,GAAG,MAAM,CAAE,EAAE,OAAO,CAAC,EAAE,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;AACtG,QAAM,CAAC,KAAK,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;AACrD,SAAO,IAAI,CAAC;CACb;;AA1CD,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC7C,IAAI,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACzC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,UAAU,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;AAElD,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;IAEnC,QAAQ,GAEN,MAAM,CAFR,QAAQ;IACR,QAAQ,GACN,MAAM,CADR,QAAQ;;AAGV,SAAS,UAAU,GAAG;AACpB,MAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,GAAG,aAAa,EAAE,QAAQ,GAAG,MAAM,CAAC,CAAC;AAC/E,SAAO,OAAO,CAAC;CAChB;;AAED,SAAS,aAAa,GAAG;AACvB,MAAI,OAAO,GAAG,UAAU,EAAE,CAAC;AAC3B,QAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC9B,QAAM,CAAC,KAAK,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;CACnD;;AAwBD,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;AAC3B,UAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;CAC7C;;AAED,MAAM,CAAC,OAAO,GAAG;AACf,mBAAiB,EAAjB,iBAAiB;AACjB,eAAa,EAAb,aAAa;AACb,eAAa,EAAb,aAAa;CACd,CAAC","file":"scripts/buildPackage.js","sourcesContent":["let child_process = require('child_process');\nlet crayon = require('@ccheever/crayon');\nlet path = require('path');\nlet spawnAsync = require('@exponent/spawn-async');\n\nlet dotApp = require('./lib/dotApp');\nlet {\n  APP_NAME,\n  XDE_ROOT,\n} = dotApp;\n\nfunction getAppRoot() {\n  let appRoot = path.join(XDE_ROOT, APP_NAME + '-darwin-x64', APP_NAME + '.app');\n  return appRoot;\n}\n\nfunction copyIconsSync() {\n  let appRoot = getAppRoot();\n  dotApp.copyIconsSync(appRoot);\n  crayon.green.log(\"Updated icons to use Exponent\");\n}\n\nasync function buildPackageAsync(opts) {\n  // electron-packager ./ 'Exponent XDE' --platform=darwin --arch=x64 --version=0.31.2 --prune\n  let electronPackager = path.join(XDE_ROOT, 'node_modules', '.bin', 'electron-packager');\n  let electronVersion = '0.31.2'; // TODO: Read this from actual electron package\n  return await spawnAsync(electronPackager, ['./', APP_NAME, '--platform=darwin', '--arch=x64', '--version=0.31.2', '--prune', '--overwrite'], {stdio: 'inherit'});\n}\n\nasync function runAsync() {\n  await buildPackageAsync();\n  crayon.green.log(\"Bundled up Electron app\");\n  copyIconsSync();\n  await compressAsync(getAppRoot());\n  crayon.green.log(\"Building package complete.\");\n  return true;\n}\n\nasync function compressAsync(appRoot) {\n  await spawnAsync('zip', ['-r', path.join(XDE_ROOT, APP_NAME + '.zip',), appRoot], {stdio: 'inherit'});\n  crayon.green.log(\"Compressed app into .zip archive\");\n  return true;\n}\n\nif (require.main === module) {\n  runAsync().then(console.log, console.error);\n}\n\nmodule.exports = {\n  buildPackageAsync,\n  compressAsync,\n  copyIconsSync,\n};\n"],"sourceRoot":"/source/"}