'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var ActivityIndicatorProps = {
  color: {
    red: 0,
    green: 0,
    blue: 0,
    alpha: 98 / 255
  },
  segments: 12,
  segmentWidth: 2,
  segmentLength: 3,
  spacing: 2,
  fadeTo: 31 / 98,
  fadeSteps: 6
};

// RGBA values measured by looking at the refresh control on top of white
// and black and solving a system of equations
var RefreshControlProps = {
  color: {
    red: Math.round(4845 / 56),
    green: Math.round(765 / 8),
    blue: Math.round(24225 / 224),
    alpha: 224 / 255
  },
  segments: 12,
  segmentWidth: 2,
  segmentLength: 5,
  spacing: 3,
  fadeTo: 0,
  fadeSteps: 11
};

var LoadingIndicator = (function (_React$Component) {
  _inherits(LoadingIndicator, _React$Component);

  function LoadingIndicator() {
    _classCallCheck(this, _LoadingIndicator);

    _get(Object.getPrototypeOf(_LoadingIndicator.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LoadingIndicator, [{
    key: 'render',
    value: function render() {
      var segmentCount = this.props.segments;
      var segmentWidth = this.props.segmentWidth;
      var segmentLength = this.props.segmentLength;
      var innerRadius = segmentWidth * 2 + this.props.spacing;

      var opacityDelta = (1 - this.props.fadeTo) / this.props.fadeSteps;

      var segments = [];
      for (var ii = 0; ii < segmentCount; ii++) {
        var opacity = 1 - Math.min(ii, this.props.fadeSteps) * opacityDelta;
        var rotation = -ii * 360 / segmentCount;
        segments.push(_react2['default'].createElement('line', {
          key: ii,
          x1: '0',
          y1: innerRadius,
          x2: '0',
          y2: innerRadius + segmentLength,
          style: { opacity: opacity },
          transform: 'rotate(' + rotation + ')'
        }));
      }

      var _props$color = this.props.color;
      var red = _props$color.red;
      var green = _props$color.green;
      var blue = _props$color.blue;
      var alpha = _props$color.alpha;

      var rgbaColor = 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';

      var radius = innerRadius + segmentLength + Math.ceil(segmentWidth / 2);

      return _react2['default'].createElement(
        'svg',
        {
          className: this.props.className,
          style: [styles.indicator, this.props.style],
          width: radius * 2,
          height: radius * 2,
          xmlns: 'http://www.w3.org/2000/svg' },
        _react2['default'].createElement(
          'g',
          {
            stroke: rgbaColor,
            strokeWidth: segmentWidth,
            strokeLinecap: 'round',
            transform: 'translate(' + radius + ', ' + radius + ')' },
          segments
        )
      );
    }
  }], [{
    key: 'ActivityIndicatorProps',
    value: ActivityIndicatorProps,
    enumerable: true
  }, {
    key: 'RefreshControlProps',
    value: RefreshControlProps,
    enumerable: true
  }, {
    key: 'defaultProps',
    value: ActivityIndicatorProps,
    enumerable: true
  }]);

  var _LoadingIndicator = LoadingIndicator;
  LoadingIndicator = (0, _radium2['default'])(LoadingIndicator) || LoadingIndicator;
  return LoadingIndicator;
})(_react2['default'].Component);

exports['default'] = LoadingIndicator;

var spinKeyframes = _radium2['default'].keyframes({
  from: {
    transform: 'rotate(0deg)'
  },
  to: {
    transform: 'rotate(360deg)'
  }
});

var styles = {
  indicator: {
    animation: spinKeyframes + ' 1s steps(12) infinite'
  }
};
module.exports = exports['default'];